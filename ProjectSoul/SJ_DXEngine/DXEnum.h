#pragma once

enum ACTOR_UPDATE_LAYER
{
	UPDATE_LAYER_FIRST = -2,
	UPDATE_LAYER_HIGH,
	UPDATE_LAYER_NORMAL,
	UPDATE_LAYER_LOW,
	UPDATE_LAYER_LAST,
	MAX_ACTOR_UPDATE_LAYER,
};

enum COLTYPE
{
	CT_POINT,
	CT_RECT,
	CT_CIRCLE,
	CT_2DPOLYGON,
	CT_3DSPHERE,
	CT_3DAABB,
	CT_3DOBB,
	CT_RAY,
	CT_3DMESH,
	MAXCOLTYPE,
};



// Z 깊이가 같으면 먼저 그린 픽셀이 남게된다.
typedef enum RENDER_LAYER
{
	RENDER_LAYER_FIRST,
	RENDER_LAYER_FRONTUI,
	RENDER_LAYER_UI,
	RENDER_LAYER_BACKUI,
	RENDER_LAYER_FRONTEFFECT,
	RENDER_LAYER_PLAYER,
	RENDER_LAYER_BACKEFFECT,
	RENDER_LAYER_OBJECT,
	RENDER_LAYER_MAP,
	MAX_RENDER_LAYER,

}RENDER_GROUP;


enum RENDER_SORTING 
{
	RENDER_YSORTING,
	RENDER_NONESORTING,
	MAXRENDERSORTING,
};

enum RENDER_OPTION
{
	RENDER_OPTION_NONE,
	RENDER_OPTION_GRAYSCALE,
	MAX_RENDER_OPTION
};

typedef enum CAMERA_LAYER
{
	CAMERA_LAYER_MAP ,
	CAMERA_LAYER_OBJECT = 0,
	CAMERA_LAYER_UI = 10,
}CAMERA_GROUP;


enum SCENECOLLISION 
{
	COLLISION_2D,
	COLLISION_3D,
};

enum SHADER_TYPE
{
	SHADER_VERTEX,
	SHADER_HULL,
	SHADER_DOMAIN,
	SHADER_GEOMETRY,
	SHADER_PIXEL,
};


// 2D Sprite Renderer의 사이즈 타입
enum SPRITE_RENSIZE_TYPE
{
	RENSIZE_ACTORSIZE,			// Actor 크기
	RENSIZE_SPRITESIZE,			// 스프라이트 원본 비율
	RENSIZE_CUSTOMSIZE,			// 직접 지정 크기
};