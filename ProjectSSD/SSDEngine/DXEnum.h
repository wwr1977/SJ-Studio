#pragma once

enum ACTOR_UPDATE_LAYER
{
	UPDATE_LAYER_FIRST = -2,
	UPDATE_LAYER_HIGH,
	UPDATE_LAYER_NORMAL,
	UPDATE_LAYER_LOW,
	UPDATE_LAYER_LAST,
	MAX_ACTOR_UPDATE_LAYER,
};

enum COLTYPE
{
	CT_POINT,
	CT_RECT,
	CT_CIRCLE,
	CT_2DPOLYGON,
	CT_3DSPHERE,
	CT_3DAABB,
	CT_3DOBB,
	CT_RAY,
	CT_3DMESH,
	CT_FRUSTUM,
	MAXCOLTYPE,
};



// Z 깊이가 같으면 먼저 그린 픽셀이 남게된다.
typedef enum RENDER_LAYER
{
	RENDER_LAYER_FIRST,
	RENDER_LAYER_FRONTUI,
	RENDER_LAYER_UI,
	RENDER_LAYER_BACKUI,
	RENDER_LAYER_DEBUG,
	RENDER_LAYER_FRONTEFFECT,
	RENDER_LAYER_PLAYER,
	RENDER_LAYER_BACKEFFECT,
	RENDER_LAYER_OBJECT,
	RENDER_LAYER_MAP,
	RENDER_LAYER_ALPHA,
	MAX_RENDER_LAYER,
}RENDER_GROUP;


enum RENDER_MODE
{
	RENDMODE_NORMAL,
	RENDMODE_DATA,
	MAX_RENDER_MODE,
};

typedef enum CAMERA_LAYER
{
	CAMERA_LAYER_MAP ,
	CAMERA_LAYER_OBJECT = 0,
	CAMERA_LAYER_UI = 10,
}CAMERA_GROUP;

enum UI_LAYER
{
	UL_BASE,
	UL_GAUGE,
	UL_MAX,
};

enum UI_COLL_TYPE
{
	UCT_BASE,
	UCT_BUTTON,
	UCT_MAX
};

enum SCENECOLLISION 
{
	COLLISION_2D,
	COLLISION_3D,
};

enum SHADER_TYPE
{
	SHADER_VERTEX	= 0x00000001,
	SHADER_HULL		= 0x00000002,
	SHADER_DOMAIN	= 0x00000004,
	SHADER_GEOMETRY = 0x00000008,
	SHADER_PIXEL	= 0x00000010,
	SHADER_COMPUTE  = 0x00000020,
	SHADER_ALL		= 0x0000003f,
};


// 2D Sprite Renderer의 사이즈 타입
enum SPRITE_RENSIZE_TYPE
{
	RENSIZE_SPRITESIZE,			// 스프라이트 원본 비율
	RENSIZE_CUSTOMSIZE,			// 직접 지정 크기
};

enum MATERIAL_TEXTURETYPE
{
	TEXTYPE_LOAD_TEXTURE,
	TEXTYPE_TARGET_TEXTURE,
	MAX_MATERIAL_TEXTURETYPE,
	LOAD_TEXTURE = TEXTYPE_LOAD_TEXTURE,
	TARGET_TEXTURE = TEXTYPE_TARGET_TEXTURE,
};

enum FBX_ANIMATION_TYPE
{
	FBXANI_STATIC					= 0x00,			//	애니메이션이 없는 타입			
	FBXANI_ANIMATION				= 0x01,			//  애니메이션이 있는 타입
	FBXANI_MULTITAKE_ANIMATION		= 0x02,			//  여러 애니메이션 정보를 갖는 타입(애니메이션을 바로 로드하지 않는다.)
	FBXANI_MASK						= 0xff, 
	MAX_FBX_ANIMATION_TYPE,
};

enum FBX_AUTO_TYPE
{
	FBXAUTO_LOAD					= 0x0100,
	FBXAUTO_SAVE					= 0x1000,
	FBXAUTO_LOADSAVE				= 0x1100,
	FBXAUTO_MASK					= 0x1100,
	MAX_FBX_AUTO_TYPE				,
};

enum FBX_INIT_FLAG
{
	FBX_STATIC = FBXANI_STATIC | FBXAUTO_LOAD | FBXAUTO_SAVE ,
	FBX_ANIMATION = FBXANI_ANIMATION | FBXAUTO_LOAD,
	FBX_MULTITAKE_ANIMATION = FBXANI_MULTITAKE_ANIMATION | FBXAUTO_LOAD,
	FBX_ANIMATION_AUTOSAVE = FBXANI_ANIMATION | FBXAUTO_LOAD | FBXAUTO_SAVE,
	FBX_STATIC_NONAUTO = FBXANI_STATIC ,
};

enum LIGHT_TYPE 
{
	DIRECTION_LIGHT,
	POINT_LIGHT,
	SPOT_LIGHT,
	MAX_LIGHT_TPYE,
};

enum FRAME_EVENT_TYPE
{
	EVENT_CONSTANT,
	EVENT_TEMPORARY,
	MAX_FRAME_EVENT_TYPE
};

enum MINIMIZE_BUFFER_TYPE
{
	MINI_64,
	MINI_128,
	MINI_256,
	MINI_512,
	MINI_MAX
};

enum MINIMIZE_PROCESSTPYE 
{
	MINIMIZE_BASE,
	MINIMIZE_LUMINANCE,
	MAX_MINIMIZE_PROCESSTPYE,
};

enum FRUSTUM_TYPE
{
	FT_NEAR		,
	FT_FAR		,
	FT_LEFT		,
	FT_RIGHT	,
	FT_TOP		,
	FT_BOT		,
	FT_END
};

