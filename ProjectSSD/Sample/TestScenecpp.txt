#include "TestScene.h"
#include <FilePathMgr.h>
#include <ResourceMgr.h>
#include <Texture.h>
#include <Sprite.h>
#include <Actor.h>
#include <Sprite2DRenderer.h>
#include <Animator2D.h>
#include <Base3DRenderer.h>
#include <Material.h>
#include <DeadByDaylightGlobal.h>
#include <FreeCameraScript.h>
#include <TimerMgr.h>
#include <DXFont.h>
#include <Grid3DRenderer.h>
#include <KeyMgr.h>
#include <GlobalDebug.h>
#include <Base3DRenderer.h>
#include <Fbx.h>
#include <Skybox.h>
#include <TransForm.h>
#include <FbxRenderer.h>
#include <SkeletalFbxRenderer.h> 
#include <RenderTarget.h>
#include <GaussianBlur.h>
#include <PlayerCamScript.h>
#include <BloomFilter.h>
#include <Camera.h>
#include <ClientConnectMgr.h>
#include <GaussianBloom.h>
#include <TerrainRenderer.h>

CTestScene::CTestScene(CScene* _PairScene)
	:CSceneScript(_PairScene), m_DebugFont(nullptr)
{

}


CTestScene::~CTestScene()
{

}

const bool CTestScene::Loading()
{
	m_DebugFont = CResourceMgr<CDXFont>::Find(L"나눔바른펜");
	SPTR<CCamera> MainCam = GetMainCamera();

	MainCam->ACTOR->AddCom<CFreeCameraScript>();
	MainCam->SetPerspectiveMode();

	//MainCam->AddFilter<CGaussianBloom>();

	//TempBloom = MainCam->AddFilter<CBloomFilter>(MINIMIZE_BUFFER_TYPE::MINI_128);
	//TempBloom->SetBloomResTarget(MainCam);
	//TempBloom->SetMiniBufferAmount(0.6f);
	//TempBloom->SetMiniBufferLuminance(Vec3(0.2125f, 0.7154f, 0.0721f));
	//TempBloom->SetMiniBufferMultiple(2.f);
	//TempBloom->SetRange(5);
	//TempBloom->SetSigma(50.f);

	//SPTR<CGaussianBlur> Gau = MainCam->AddFilter<CGaussianBlur>();
	//Gau->SetGaussianBuffer(0.8f, 7);

	//디폴트 라이트
	SPTR<CActor> DeLightActor = CreateActor(UPDATE_LAYER_NORMAL, L"LightActor");
	SPTR<CLight> DLight = DeLightActor->AddCom<CLight>(LIGHT_DATA{ RENDER_LAYER_PLAYER, DIRECTION_LIGHT, false });
	DLight->SetLightColor(Vec4::Mint);
	DLight->SetLightDir(Vec3(-1.f, -1.f, 0.f));
	DLight->SetLightPower(0.5f);
	DLight->SetSpecPower(200.f);

	//스카이박스
	SPTR<CActor> SkyActor = CreateActor(L"SkyActor", UPDATE_LAYER_NORMAL);
	SPTR<CSkybox> SkyBox = SkyActor->AddCom<CSkybox>(RENDATA{ RENDER_LAYER_MAP });
	SkyBox->SetSkyBoxSize(10000.f);
	SkyBox->SetTexture(L"NightMoon");

	//터레인
	CResourceMgr<CMultiTexture>::Create(L"Floor2", { D3D11_USAGE::D3D11_USAGE_DEFAULT, 3, L"BaseFloor_2", L"TerrainDiff_2", L"TerrainNormal_2" });

	SPTR<CActor> TerrainActor = CreateActor(UPDATE_LAYER_NORMAL, L"TerrainActor");
	SPTR<CTerrainRenderer> TerrainRender = TerrainActor->AddCom<CTerrainRenderer>(RENDATA{ RENDER_LAYER_PLAYER });
	TerrainActor->TRANS->SetScale(Vec3(10.f, 10.f, 10.f));
	TerrainRender->CreateTerrain(L"BaseFloor", L"TerrainDiff", L"TerrainNormal", 512, 512, 50.f);
	TerrainRender->CreateFloor(L"Floor2");

	//그리드
	//SPTR<CActor> MeshTestActor = CreateActor(L"GridActor", UPDATE_LAYER_NORMAL);
	//SPTR<Grid3DRenderer> TempMeshRender = MeshTestActor->AddCom<Grid3DRenderer>(RENDATA{ RENDER_LAYER_PLAYER });
	//TempMeshRender->SetColorFactor(VEC4::Pink);

	SPTR<CActor> Test3 = CreateActor(L"TestSphereActor", UPDATE_LAYER_NORMAL);
	SPTR<CBase3DRenderer> Sphere1 = Test3->AddCom<CBase3DRenderer>(RENDATA{ RENDER_LAYER_PLAYER });
	Sphere1->PushMesh(L"SeoulLandSphere_Lv1");
	Sphere1->PushMaterial(L"ColorBase3D");
	Sphere1->GetMaterial(0)->SetRasterizerState(L"WireFrame");
	Sphere1->SetRenSize(Vec3(100.f, 100.f, 100.f));
	Test3->SetPos(Vec3(200.f, 0.f, 0.f));


	//사각형
	//SPTR<CActor> Test3 = CreateActor(L"TestSphereActor", UPDATE_LAYER_NORMAL);
	//SPTR<CBase3DRenderer> Sphere1 = Test3->AddCom<CBase3DRenderer>(RENDATA{ RENDER_LAYER_PLAYER });
	//Sphere1->PushMesh(L"Sphere_Lv64");
	//Sphere1->PushMaterial(L"Base3D");
	//Sphere1->SetRenSize(Vec3(100.f, 100.f, 100.f));
	//Sphere1->SetRenPivot(Vec3(100.f, 100.f, 100.f));
	//Sphere1->ACTOR->SetPos(Vec3(0.f, 0.f, 200.f));
	//Sphere1->GetMaterial(0)->PushSampler(0, LINEARSAMPLER);
	//Sphere1->DefferredOn();

	//SPTR<CFbx> SurvivorFbx = CResourceMgr<CFbx>::Load(CFilePathMgr::GetPath(L"Animation", L"TestWalk.fbx"), CFbx::LOAD_DESC{ FBX_MULTITAKE_ANIMATION ,L"idle" });
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_walkcrouch.fbx"), L"walkcrouch");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_walkherted.fbx"), L"walkherted");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_walkslow.fbx"), L"walkslow");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_sprint.fbx"), L"sprint");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_hertedsprint1.fbx"), L"hertedsprint1");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_hertedsprint2.fbx"), L"hertedsprint2");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_hitcrawl1.fbx"), L"hitcrawl1");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_hitcrawl2.fbx"), L"hitcrawl2");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_healing.fbx"), L"healing");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_healdloop.fbx"), L"healdloop");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_selfhealing.fbx"), L"selfhealing");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_lockerhide.fbx"), L"lockerhide");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_hurtedidle.fbx"), L"hurtedidle");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_hurtedcrouch.fbx"), L"hurtedcrouch");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_hookedfree.fbx"), L"hookedfree");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_hookedidle.fbx"), L"hookedidle");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_hookedstruggle.fbx"), L"hookedstruggle");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_genrefair.fbx"), L"genrefair");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_genfail.fbx"), L"genfail");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_killedspiderin.fbx"), L"killedspiderin");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_killedspiderloop.fbx"), L"killedspiderloop");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_killedspiderout.fbx"), L"killedspiderout");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_rescue.fbx"), L"hookedrescue");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_rescuehooked.fbx"), L"rescuehooked");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_grap.fbx"), L"grap");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_killing.fbx"), L"killing");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_hookin.fbx"), L"hookin");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_pickup.fbx"), L"pickup");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_carrydrop.fbx"), L"carrydrop");
	//SurvivorFbx->LoadFbxAnimation(CFilePathMgr::GetPath(L"Animation", L"survivor_carryidle.fbx"), L"carryidle");


	SPTR<CFbx> SurvivorFbx = CResourceMgr<CFbx>::Load(L"survivor", CFilePathMgr::GetPath(L"Animation", L"survivor.sfbx"), CFbx::LOAD_DESC{ FBX_MULTITAKE_ANIMATION });
	SPTR<CFbx> KillerFbx = CResourceMgr<CFbx>::Load(L"killer", CFilePathMgr::GetPath(L"Animation", L"killer.sfbx"), CFbx::LOAD_DESC{ FBX_MULTITAKE_ANIMATION });

	//생존자
	//SPTR<CActor> TestActor = CreateActor(L"TestMeshActor", UPDATE_LAYER_NORMAL);
	////MainCam->ACTOR->AddCom<CPlayerCamScript>(TestActor);
	////MainCam->SetPerspectiveMode();

	//TestActor->TRANS->SetRotate(Vec3(-90.f, 0.f, 0.f));
	//m_AnimRen = TestActor->AddCom<CSkeletalRenderer>(RENDATA{ RENDER_LAYER_PLAYER });
	//m_AnimRen->SetFbx(L"survivor");
	//m_AnimRen->CreateBoneAnimation(L"walkcrouch", 1);
	//m_AnimRen->CreateBoneAnimation(L"walkherted", 2);
	//m_AnimRen->CreateBoneAnimation(L"walkslow", 3);
	//m_AnimRen->CreateBoneAnimation(L"sprint", 4);
	//m_AnimRen->CreateBoneAnimation(L"hertedsprint1", 5);
	//m_AnimRen->CreateBoneAnimation(L"hertedsprint2", 6);
	//m_AnimRen->CreateBoneAnimation(L"hitcrawl1", 7);
	//m_AnimRen->CreateBoneAnimation(L"hitcrawl2", 8);
	//m_AnimRen->CreateBoneAnimation(L"healing", 9); //
	//m_AnimRen->CreateBoneAnimation(L"healdloop", 10);
	//m_AnimRen->CreateBoneAnimation(L"selfhealing", 11);
	//m_AnimRen->CreateBoneAnimation(L"lockerhide", 12);
	//m_AnimRen->CreateBoneAnimation(L"hurtedidle", 13);
	//m_AnimRen->CreateBoneAnimation(L"hurtedcrouch", 14);
	//m_AnimRen->CreateBoneAnimation(L"hookedfree", 15);
	//m_AnimRen->CreateBoneAnimation(L"hookedidle", 16);
	//m_AnimRen->CreateBoneAnimation(L"hookedstruggle", 17);
	//m_AnimRen->CreateBoneAnimation(L"genrefair", 18); 
	//m_AnimRen->CreateBoneAnimation(L"genfail", 19);
	//m_AnimRen->CreateBoneAnimation(L"killedspiderin", 20);
	//m_AnimRen->CreateBoneAnimation(L"killedspiderloop", 21);
	//m_AnimRen->CreateBoneAnimation(L"killedspiderout", 22);
	//m_AnimRen->CreateBoneAnimation(L"rescue", 23);
	//m_AnimRen->CreateBoneAnimation(L"rescuehooked", 24);
	//m_AnimRen->ChangeBoneAnimation(L"walkcrouch"); //편집
	//m_AnimRen->PushBoneAnimEvent(L"walkcrouch", 30, &CTestScene::TestFunc, this, nullptr, EVENT_CONSTANT);
	//m_AnimRen->PushBoneAnimEvent(L"walkcrouch", 0, &CTestScene::TestFunc2, this, nullptr, EVENT_CONSTANT);



	//발전기
	//SPTR<CActor> GenActor = CreateActor(L"GenMeshActor", UPDATE_LAYER_NORMAL);
	//GenActor->TRANS->SetRotate(Vec3(-90.f, 0.f, 0.f));
	//GenActor->TRANS->SetPos(Vec3(-300.f, 0.f, 0.f));
	//SPTR<CSkeletalRenderer> GenRen = GenActor->AddCom<CSkeletalRenderer>(RENDATA{ RENDER_LAYER_PLAYER });
	//GenRen->SetFbx(L"generator");
	//GenRen->CreateBoneAnimation(L"Fail", 1);
	//GenRen->ChangeBoneAnimation(L"Fail");

	//판자
	//SPTR<CActor> BoardActor = CreateActor(L"GenMeshActor", UPDATE_LAYER_NORMAL);
	////GenActor->TRANS->SetRotate(Vec3(-90.f, 0.f, 0.f));
	//BoardActor->TRANS->SetPos(Vec3(-800.f, 0.f, 0.f));
	//SPTR<CSkeletalRenderer> BoardRen = BoardActor->AddCom<CSkeletalRenderer>(RENDATA{ RENDER_LAYER_PLAYER });
	//BoardRen->SetFbx(L"board");

	//건축물
	//SPTR<CActor> Test1 = CreateActor(L"MeshTestActor", UPDATE_LAYER_NORMAL);
	//SPTR<CStaticFbxRenderer> FbxRen1 = Test1->AddCom<CStaticFbxRenderer>(RENDATA{ RENDER_LAYER_PLAYER });
	//FbxRen1->SetFbx(L"Test");
	//FbxRen1->ACTOR->SetPos(Vec3(0.f, 0.f, 1700.f));
	//FbxRen1->ACTOR->SetSize(Vec3(5.f, 5.f, 5.f));
	//FbxRen1->SettingFbxMesh(0);


	//LightActor = CreateActor(UPDATE_LAYER_NORMAL, L"LightActor");
	//SPTR<CLight> Light = LightActor->AddCom<CLight>(LIGHT_DATA{ RENDER_LAYER_PLAYER, SPOT_LIGHT, false, L"Sphere_Lv16" });
	//Light->TRANS->SetScale(Vec3(200.f, 200.f, 200.f));
	//Light->TRANS->SetPos(Vec3(0.f, 0.f, 0.f));
	//Light->SetLightColor(Vec4::Pink);
	//Light->SetLightAtenuation(Vec4(1000.f, 1.f, 1.f, 0.f));
	//Light->SetLightRange(2000.f);
	//Light->SetLightPower(3.f);
	//Light->SetLightDir(Vec3(0.f, 0.f, 1.f));

	SPTR<CActor> Test1 = CreateActor(L"MeshTestActor", UPDATE_LAYER_NORMAL);
	SPTR<CStaticFbxRenderer> FbxRen1 = Test1->AddCom<CStaticFbxRenderer>(RENDATA{ RENDER_LAYER_PLAYER });
	FbxRen1->SetFbx(L"Test");
	FbxRen1->ACTOR->SetPos(Vec3(1300.f, 0.f, 1500.f));
	FbxRen1->SettingFbxMesh(0);

	LightActor = CreateActor(UPDATE_LAYER_NORMAL, L"VolumeLightActor");
	LightActor->TRANS->SetPos(Vec3(1500.f, 494.f, 1500.f));
	SPTR<CLight> Light2 = LightActor->AddCom<CLight>(LIGHT_DATA{ RENDER_LAYER_PLAYER, SPOT_LIGHT, true, L"Cone_Lv360" });
	Light2->SetLightColor(Vec4::PastelRed);
	Light2->SetLightAtenuation(Vec4(1.f, 1.f, 0.f, 0.f));
	Light2->SetLightPower(1.f);
	Light2->SetLightSize(Vec3(600.f, 600.f, 600.f));
	Light2->SetLightDir(Vec3(0.f, -1.f, 0.f));


	//SPTR<CActor> Test3 = CreateActor(L"TestSphereActor", UPDATE_LAYER_NORMAL);
	//SPTR<CBase3DRenderer> Sphere1 = Test3->AddCom<CBase3DRenderer>(RENDATA{ RENDER_LAYER_PLAYER });
	//Sphere1->PushMesh(L"Cone_Lv360");
	//Sphere1->PushMaterial(L"Base3D");
	//Sphere1->GetMaterial(0)->PushSampler(0, LINEARSAMPLER);
	////Sphere1->SetColorFactor(Vec4(1.f, 1.f, 1.f, 0.9f));
	//Sphere1->GetMaterial(0)->PushTexture(0, L"LightTest");
	//Sphere1->SetAlpha(0.5f);

	//LightActor = CreateActor(UPDATE_LAYER_NORMAL, L"LightActor");
	//SPTR<CLight> TextLight = LightActor->AddCom<CLight>(LIGHT_DATA{ RENDER_LAYER_PLAYER, POINT_LIGHT, true, L"Cone_Lv360" });
	//TextLight->TRANS->SetScale(Vec3(200.f, 700.f, 200.f));
	//TextLight->TRANS->SetPos(Vec3(0.f, 1200.f, 0.f));
	//TextLight->SetLightColor(Vec4::White);
	//TextLight->SetLightAtenuation(Vec4(700.f, 1.f, 1.f, 0.f));
	//TextLight->SetLightRange(2000.f);
	//TextLight->SetLightPower(10.f);
	//LightActor->SetChild(Test3);

	//UI
	//SPTR<CCamera> UICam = GetUICamera();
	//Tem = UICam->ACTOR->AddUICom(UI_DATA{ RENDER_LAYER_UI, UICam.PTR, UCT_BUTTON, L"UIBack" });
	//Tem->SetSubSize(Vec3(100.f, 100.f, 0.f));
	//Tem->SetSubPivot(Vec3(-400.f, 100.f, 100.f));
	//Tem->SetCollSize(Vec3(100.f, 100.f, 0.f));
	//Tem->SetCollPivot(Vec3(-400.f, 100.f, 0.f));

	//Tem->SetEnterCallBack(this, &CTestScene::EnterTest);
	//Tem->SetStayCallBack(this, &CTestScene::StayTest);
	//Tem->SetExitCallBack(this, &CTestScene::ExitTest);


	return true;
}

void CTestScene::DebugRender()
{
	SSDDebug::DrawRenderTarget(CResourceMgr<RT>::Find(L"Diffuse"), 10, 5, 0, 3);
	SSDDebug::DrawRenderTarget(CResourceMgr<RT>::Find(L"Position"), 10, 5, 1, 3);
	SSDDebug::DrawRenderTarget(CResourceMgr<RT>::Find(L"Normal"), 10, 5, 2, 3);
	SSDDebug::DrawRenderTarget(CResourceMgr<RT>::Find(L"Depth"), 10, 5, 3, 3);

	SSDDebug::DrawRenderTarget(CResourceMgr<RT>::Find(L"LightDiffuse"), 10, 5, 0, 4);
	SSDDebug::DrawRenderTarget(CResourceMgr<RT>::Find(L"LightSpecular"), 10, 5, 1, 4);

	SSDDebug::DrawRenderTarget(CResourceMgr<RT>::Find(L"Minimize64"), 10, 5, 0, 2);
	SSDDebug::DrawRenderTarget(CResourceMgr<RT>::Find(L"Minimize128"), 10, 5, 1, 2);
	SSDDebug::DrawRenderTarget(CResourceMgr<RT>::Find(L"Minimize256"), 10, 5, 2, 2);
	SSDDebug::DrawRenderTarget(CResourceMgr<RT>::Find(L"Minimize512"), 10, 5, 3, 2);


	wchar_t	DebugBuff[MAXSTRING];

	memset(DebugBuff, 0, sizeof(wchar_t)*MAXSTRING);
	Vec3 CamPos = GetMainCamera()->GetPos();

	swprintf_s(DebugBuff, L"FPS : %.f", FPS);

	m_DebugFont->DrawString(DebugBuff, 20.f, Vec2(5.f, 0.f), Vec4::Pink);

	swprintf_s(DebugBuff, L"Camera Pos  : (%.1f , %.1f , %.1f)", CamPos.x, CamPos.y, CamPos.z);
	m_DebugFont->DrawString(DebugBuff, 20.f, Vec2(250.f, 0.f), Vec4::Pink);

	swprintf_s(DebugBuff, L"Mouse Pos : (%.1f , %.1f)", Core::GetScreenMousePos().x, Core::GetScreenMousePos().y);
	m_DebugFont->DrawString(DebugBuff, 20.f, Vec2(0.f, 25.f), Vec4::Pink);

	swprintf_s(DebugBuff, L"Screen Size : (%.1f , %.1f)", (float)Core::GetWindowWidth(), (float)Core::GetWindowHeight());
	m_DebugFont->DrawString(DebugBuff, 20.f, Vec2(250.f, 25.f), Vec4::Pink);


	if (Core::CheckMouseOnScreen())
		swprintf_s(DebugBuff, L"Mouse In Screen");
	else
		swprintf_s(DebugBuff, L"Mouse Out of Screen");

	m_DebugFont->DrawString(DebugBuff, 20.f, Vec2(500.f, 25.f), Vec4::Pink);

}

void CTestScene::TestFunc(void* _Para)
{
	//m_Light->SetLightColor(Vec4::PastelRed);
}

void CTestScene::TestFunc2(void* _Para)
{
	//m_Light->SetLightColor(Vec4::PastelGreen);
}

void CTestScene::PreUpdate(const float & _DeltaTime)
{
	if (nullptr == LightActor)
	{
		return;
	}

	Vec3 MoveDir = Vec3();

	if (true == KEY("CAM_UP"))
		LightActor->TRANS->AccRotate(Vec3(0.f, 0.f, 360.f*_DeltaTime));

	if (true == KEY("CAM_DOWN"))
		LightActor->TRANS->AccRotate(Vec3(0.f, 0.f, -360.f*_DeltaTime));

	if (true == KEY("UP"))
		MoveDir -= LightActor->TRANS->GetUp();

	if (true == KEY("DOWN"))
		MoveDir -= LightActor->TRANS->GetDown();

	if (true == KEY("LEFT"))
		MoveDir += LightActor->TRANS->GetLeft();

	if (true == KEY("RIGHT"))
		MoveDir += LightActor->TRANS->GetRight();


	if (MoveDir == Vec3())
		return;


	LightActor->TRANS->Move(MoveDir, 1000.f, _DeltaTime);
}

void CTestScene::PostUpdate(const float & _DeltaTime)
{
	if (TRUE == KEYDOWN("NextAni"))
	{
		m_AnimRen->ChangeNextAnimation();
	}

	if (TRUE == KEYDOWN("PrevAni"))
	{
		m_AnimRen->ChangePrevAnimation();
	}

	if (TRUE == KEYDOWN("H"))
	{
		TempBloom->FilterOff();
	}
	if (TRUE == KEYDOWN("J"))
	{
		TempBloom->FilterOn();
	}
}

void CTestScene::LastUpdate(const float & _DeltaTime)
{
}
